name: Check if python, modules and venv available to run flow-migrate scripts.


on:
 # Run only on manuual trigger
 workflow_dispatch:


# Variables defined
env:
  download_dir: "/tmp"
  anaconda_location: "/apps/anaconda"
  anaconda_bin_path: "/apps/anaconda/bin"
  conda_env: "nifi_reg_py_env"
  conda_packages: "python=3.9.12 pip=21.2.4"
  pip_modules: "nipyapi pip_search jproperties"
  repo: "subin-telus/nifi-registry-migrate-code-test"
  proxy: "http://webproxystatic-on.tsl.telus.com:8080"


jobs:

  checkout_repo:
    runs-on: self-hosted
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.repo }}
          token: ${{ secrets.TOKEN }}

  conda_installation_check:
    runs-on: self-hosted
    needs: [checkout_repo]
    steps:
    
      - name: Get Conda Version
        id: get-conda-version
        shell: bash
        run: |
          cond --version 1> temp.txt 2>> temp.txt
          conda_ver=$(head temp.txt)
          not_found="command not found"
          if [[ "$conda_ver" =~ .*"$not_found".* ]]; then
           value="true"
          else
           value="false"
          fi
          echo "::set-output name=ver_value::$value"
          rm -rf temp.txt
        continue-on-error: true

      - name: Check Conda Version
        if: steps.get-conda-version.outputs.ver_value != 'true'
        shell: bash
        run: |
          echo -e "${{ steps.get-conda-version.outputs.ver_value }}"
          echo -e "\nInstalling Conda\n"
          #sh anaconda_installer.sh

  python_installation_check:
    runs-on: self-hosted
    needs: [conda_installation_check]
    steps:

      - name: Connect to venv
        id: connect-venv
        shell: bash
        run: |
          eval "$(command conda 'shell.bash' 'hook' 2> /dev/null)"
          conda init bash
          conda activate ${{ env.conda_env }}
          def_env=$(echo $CONDA_DEFAULT_ENV)
          echo "default_env=$def_env" >> $GITHUB_ENV
          echo -e "def env is -${def_env}-"
          echo -e "default - $CONDA_DEFAULT_ENV"
          # echo "::set-output name=default_env::$(echo $CONDA_DEFAULT_ENV)"
          echo -e "outout env is -${{ env.default_env }}-"

      - name: Check if connected to venv
        if: ${{ env.default_env }} != ${{ env.conda_env }}
        run: |
          echo "::error::Unable to activate conda venv - ${{ env.conda_env }}. Exiting..."
          exit 1
